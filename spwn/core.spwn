// ENGINE CORE
// DO NOT MODIFY THIS UNLESS YOU KNOW WHAT ARE YOU DOING

extract obj_props;
extract import "obj_props_2_2.spwn"

let camera = import "camera_triggers.spwn";
let scenesLib = import "scenes.spwn";

// Variables
let coreVersion = "0.0.1";
let currentScene = 0;
let scenes = 0;
let endTriggerGroup = 9998g;


// Function to create text objects
create_text = (text, txt_x, txt_y, group = 0g, size = 1) {
    return $.add(text.to_obj().with(X, txt_x).with(Y, txt_y).with(SCALING, size).with(obj_props.GROUPS,group));
};

// Function to count scenes
countScene = () {
    scenes += 1;
};
exitCamera = (camGroup){
    camera.static_camera(camGroup, exit_static=true, instant_exit=true);
};

// Function to change the current scene
change_scene = (sceneName) {
    // Hide all scenes
    let firstGroupNumber = 1001;
    let maxScenes = 1000;

    let sceneGroups = []
    
    for i in 1001g..2001g{
        sceneGroups.push(i)
    }

    let i = 0;

    while (i <= scenes) {
        let groupModifying = sceneGroups[i];
        groupModifying.alpha(0);
        i++;
    }

    let currentSceneGroup = scenesLib.scenes[sceneName]
    currentSceneGroup.alpha(1)
};

endLevel = (){
    endTriggerGroup.toggle_on();
    $.print("Level ended!")
}

playSound = (sound_id = 1, speed = 1, pitch = 1, loop = false){
    $.add(obj{
        OBJ_ID: 3602,
        SONG_SFX_ID: sound_id,
        SONG_SFX_SPEED: speed,
        SFX_PITCH: pitch,
        SONG_SFX_LOOP: loop
    });
};

showWatermark = (){
create_text("Made with Dash Game Engine", -50, 2000+500,0g,0.6);
create_text("Github: github.com/dash-engine/Dash-Engine", -50, 1960+500,0g,0.6);
// Core version text
create_text("Using core ver:", -50, 1940+500,0g,0.6);
create_text(coreVersion,80,1940+500,0g,0.6);
}

/* 2.2 Gamescene, Thanks to: github.com/itsmebombie/gamescene-2.2/tree/main */
extract { // remove this once obj_props gets the 2.2 update
    HIDE_P1: @object_key::{id: 162, pattern: @bool, name: "HIDE_P1"},
    HIDE_P2: @object_key::{id: 163, pattern: @bool, name: "HIDE_P2"},
    NO_DEATH_SFX: @object_key::{id: 576, pattern: @bool, name: "NO_DEATH_SFX"},
    EVENT_EXTRA_ID: @object_key::{id: 447, pattern: @number, name: "EVENT_EXTRA_ID"},
    EVENT_EXTRA_ID2: @object_key::{id: 525, pattern: @number, name: "EVENT_EXTRA_ID2"},
    EVENT_LIST: @object_key::{id: 430, pattern: @array|@string|@number, name: "EVENT_LIST"},
    FREE_MODE: @object_key::{id: 111, pattern: @bool, name: "FREE_MODE"},
    HIDE_OBJECT: @object_key::{id: 135, pattern: @bool, name: "HIDE_OBJECT"},
    HIDE_ATTEMPTS: @object_key::{id: 532, pattern: @bool, name: "HIDE_ATTEMPTS"},
}

// convert to p1/p2
p1 = e => e.with(EVENT_EXTRA_ID2, 1)
p2 = e => e.with(EVENT_EXTRA_ID2, 2)

ev = obj{ // event obj
    OBJ_ID: 3604,
    X: -100, Y: 0,
}

ev_down = ev.with(EVENT_LIST, 69)
ev_up = ev.with(EVENT_LIST, 70)

ev_ldown = ev.with(EVENT_LIST, 71)
ev_lup = ev.with(EVENT_LIST, 72)
ev_rdown = ev.with(EVENT_LIST, 73)
ev_rup = ev.with(EVENT_LIST, 74)

// pattern
p = @trigger_function|@group

// add
add = (b,g) => b.with(TARGET, g.start_group if g.type == @trigger_function else g).add()
/*-------------------------------------------------*/

return {
    create_text: create_text,
    change_scene: change_scene,
    countScene: countScene,
    showWatermark: showWatermark,
    playSound: playSound,
    endLevel: endLevel,
    exitCamera:exitCamera,
    /*         GAMESCENE            */
    // g = group or trigger function, p = pattern
    button: (g: p) => add(ev_down, g),
    button_end: (g: p) => add(ev_up, g),

    button_a: (g: p) => add(p1(ev_down), g),
    button_b: (g: p) => add(p2(ev_down), g),
    button_a_end: (g: p) => add(p1(ev_up), g),
    button_b_end: (g: p) => add(p2(ev_up), g),
    
    button_a_left: (g: p) => add(p1(ev_ldown), g),
    button_a_right: (g: p) => add(p1(ev_rdown), g),
    button_b_left: (g: p) => add(p2(ev_ldown), g),
    button_b_right: (g: p) => add(p2(ev_rdown), g),
    button_a_left_end: (g: p) => add(p1(ev_lup), g),
    button_a_right_end: (g: p) => add(p1(ev_rup), g),
    button_b_left_end: (g: p) => add(p2(ev_lup), g),
    button_b_right_end: (g: p) => add(p2(ev_rup), g),

    init: (hide_players: @bool = true, disable_death_sfx: @bool = true, lock_players: @bool = true, hide_attempts: @bool = true) {
        plr = hide_players
        $.add(obj{ // options
            OBJ_ID: 2899,
            X: -30, Y: 0,
            HIDE_P1: plr, HIDE_P2: plr,
            NO_DEATH_SFX: disable_death_sfx,
            HIDE_ATTEMPTS: hide_attempts,
        })

        $.add(obj{ // no enter/exit effects
            OBJ_ID: 1915,
            X: -30, Y: 30,
        })

        $.add(obj{ // dual mode portal w/ free cam
            OBJ_ID: 286,
            X: 0, Y: 15,
            HIDE_OBJECT: true,
            FREE_MODE: true
        })

        $.add(obj{ // gravity portal
            OBJ_ID: 10,
            X: 0, Y: 15,
            HIDE_OBJECT: true,
        })
        $.add(obj{ // End
            OBJ_ID: 3600,
            GROUPS: endTriggerGroup,
            TOUCH_TRIGGERED: true,
            SCALING: 50,
        })
        endTriggerGroup.toggle_off()
        if lock_players { // lock players movement
            for pos in [[-30, 15], [30, 15], [0, -15], [0, 45]] {
                $.add(obj{
                    OBJ_ID: 1,
                    X: pos[0], Y: pos[1],
                    HIDE_OBJECT: true,
                })
            }
        }
    },
}